{
  "name": "AI News AI Agent",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// This function will be used in an n8n Code node\nfunction processData(items) {\n  // Process each item from the incoming data\n  for (const item of items) {\n    // Check if contentSnippet exists and clean it\n    if (item.json.contentSnippet) {\n      item.json.contentSnippet = cleanHtmlAndCss(item.json.contentSnippet);\n    }\n    \n    // Check if content exists and clean it\n    if (item.json.content) {\n      item.json.content = cleanHtmlAndCss(item.json.content);\n    }\n  }\n  \n  return items;\n}\n\n// Helper function to clean HTML and CSS content\nfunction cleanHtmlAndCss(text) {\n  // First remove style and script tags with their content\n  text = text.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '')\n             .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '');\n  \n  // Remove CSS selector lines (pattern: .selector or #selector)\n  text = text.replace(/\\s*[.#][a-zA-Z0-9_-]+(\\s+[a-zA-Z0-9_>,.#:\\[\\]=\"'\\*\\(\\)^-]+)*\\s*(\\{[^}]*\\})?/g, ' ');\n  \n  // Remove CSS rules that may be outside of style tags\n  text = text.replace(/\\s*\\{[^}]*\\}/g, ' ');\n  \n  // Remove at-rules like @font-face, @media\n  text = text.replace(/@[a-zA-Z-]+[^{]*\\{[\\s\\S]*?\\}/gi, ' ');\n  text = text.replace(/@[a-zA-Z-]*\\s[^;]*;/g, ' ');\n  \n  // Remove HTML tags\n  text = text.replace(/<[^>]*>/g, ' ');\n  \n  // Replace common HTML entities\n  text = text.replace(/&nbsp;/g, ' ')\n             .replace(/&amp;/g, '&')\n             .replace(/&lt;/g, '<')\n             .replace(/&gt;/g, '>')\n             .replace(/&quot;/g, '\"')\n             .replace(/&#39;/g, \"'\");\n  \n  // Remove CSS property specifications (like color: red;)\n  text = text.replace(/[a-zA-Z-]+\\s*:\\s*[^;)]*[;)]/g, ' ');\n  \n  // Remove CSS function calls like format('woff2')\n  text = text.replace(/format\\([^)]*\\)/g, ' ');\n  \n  // Remove remaining CSS-looking content\n  text = text.replace(/url\\([^)]*\\)/g, ' ');\n  \n  // Remove HTML element names on their own line\n  text = text.replace(/^(html|body|div|span|h[1-6]|p|a|img|table|tr|td|th|ul|ol|li|sup)$/gm, ' ');\n  \n  // Remove CSS class and ID selectors that might be on their own line\n  text = text.replace(/^[.#][a-zA-Z0-9_-]+$/gm, ' ');\n  \n  // Remove pseudo elements and classes\n  text = text.replace(/:[a-zA-Z-]+/g, ' ');\n  \n  // Remove media query fragments\n  text = text.replace(/@media\\s+[^{]+/g, ' ');\n  \n  // Remove any lines that look like CSS selector combinations\n  text = text.replace(/^[a-zA-Z0-9_,.\\s#>+~:[\\]=\"'*()-]+$/gm, ' ');\n  \n  // Remove empty braces\n  text = text.replace(/\\{\\s*\\}/g, ' ');\n  \n  // Extra cleanup for common patterns in your example\n  text = text.replace(/:\\s*root/g, ' ')\n             .replace(/\\}\\s*@media/g, ' ')\n             .replace(/screen\\s+and\\s+\\([^)]*\\)/g, ' ');\n  \n  // Clean up multiple spaces, newlines, etc.\n  text = text.replace(/\\s+/g, ' ').trim();\n  \n  // Filter out only text that seems like actual content (longer chunks without typical CSS/HTML patterns)\n  const lines = text.split(/\\s{2,}|[\\n\\r]+/);\n  const contentLines = lines.filter(line => {\n    // Skip short lines that might be CSS selectors or HTML tags\n    if (line.length < 10) return false;\n    \n    // Keep lines that look like natural text\n    return !/^[.#@][a-zA-Z0-9_-]/.test(line) && // Not starting with . # or @\n           !line.includes('{') && \n           !line.includes('}') &&\n           !/^[a-z]+\\s[a-z]+\\s[a-z]+$/.test(line); // Not just three words which might be selector\n  });\n  \n  return contentLines.join(' ').trim();\n}\n\n// Process the incoming items\nreturn processData($input.all());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        300
      ],
      "id": "43a8ad42-97d4-4372-8eab-c0db100b3ef8",
      "name": "Strip HTML from emails"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        580,
        80
      ],
      "id": "7500a4eb-de3d-40b3-9ad4-74ea22eb0ca4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Email title: {{ $json.title }}\nSent date: {{ $json.pubDate }}\nContent: {{ $json.content }}\n\n\nToday's date: {{ $today }}",
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for analyzing AI-related email newsletters and determining whether they align with the user's interest in AI advancements. If the newsletter content meets the criteria, you **must call the Tavily tool** to gather more information. If it does not align, you will return: **\"NO RELEVANT AI NEWS FOUND\"**.  \n\n## Context  \n- The user wants the **latest AI news**, with a focus on **viral potential, major AI model releases, and significant industry updates**.  \n- The AI agent should **prevent redundancy** by checking if similar information has been processed before.  \n- **You must always perform at least one Tavily search when relevant news is detected.**  \n\n## Tools  \n- **Tavily (for web search)**  \n\n## Instructions  \n\n1. **Extract Content**  \n   - Analyze incoming AI email newsletters.  \n   - Identify whether the content aligns with the user's interest in AI trends.  \n\n2. **Determine Relevance**  \n   - If the content is about **significant AI developments** (e.g., **new model releases, major updates, viral AI trends**), **proceed to the next step**.  \n   - If the content is **irrelevant** (e.g., promotions, referral programs, basic AI tool reviews), return: **\"NO RELEVANT AI NEWS FOUND\"**.  \n\n3. **Mandatory Tavily Search for Relevant Topics**  \n   - **If relevant news is found, immediately call Tavily** to search for more details.  \n   - **Perform multiple searches** if necessary to obtain a **complete and factual summary**.  \n   - **Do not stop after one search unless the result is clear, accurate, and sufficient**.  \n   - Example search queries:  \n     - \"Latest AI model release [Model Name]\"  \n     - \"Breakthrough AI trends [Current Year]\"  \n     - \"AI company announcements [Company Name]\"  \n\n4. **Check for Redundancy**  \n   - **Cross-check memory** to avoid processing duplicate news.  \n   - If duplicate content is detected, **skip redundant Tavily searches**.  \n\n5. **Format and Output Findings**  \n   - **Always return a single string (no JSON formatting)**.  \n   - Structure the output in a clean and readable format.  \n   - Include **summarized AI news and Tavily-retrieved links** for further reading.  \n   - **Ensure the output is structured in this format:**  \n\n---\n\n## **Output Format (Strict String Format)**  \n```plaintext\n**AI News Update**  \n\n**[Headline 1]**  \nSummary: [Summary].  \n🔗 Read more: [link1], [link2]  \n\n**[Headline 2]**  \nSummary: [Summary].  \n🔗 Read more: [link1], [link2]  \n\n(If no relevant news is found, return only: **\"NO RELEVANT AI NEWS FOUND\"**)  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1740,
        460
      ],
      "id": "8ee1e9e6-dea4-4b1a-82a7-3f73af260f65",
      "name": "AI Agent",
      "retryOnFail": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1660,
        700
      ],
      "id": "e9c253d0-253b-4b3f-a094-e2b18601068a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "gcmpfkXrpvUeh9XJ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=1",
        "contextWindowLength": 25
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1840,
        700
      ],
      "id": "9bfbb8ce-8496-452e-84be-bbf2558dea04",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "toolDescription": "Search the web for AI news using Tavily",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer YOUR-API-KEY-HERE"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"{searchResult}\"\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "searchResult",
              "description": "This is the search result to send to Tavily, to get accurate data back.",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2000,
        700
      ],
      "id": "e676ca22-2620-42b6-ab53-084c05455291",
      "name": "Tavily"
    },
    {
      "parameters": {
        "chatId": "7959254395",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3700,
        -60
      ],
      "id": "e7dd1c38-07f9-4347-82e3-167b0b51bbf5",
      "name": "Telegram",
      "webhookId": "7bd1fc49-2bd7-4756-b46d-08da911b1435",
      "notesInFlow": false,
      "credentials": {
        "telegramApi": {
          "id": "UXAf0VaiZuiaTn0x",
          "name": "Daily AI Bot"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1520,
        280
      ],
      "id": "24a3bdca-3f97-43fc-9546-c89fa9a91a89",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1240,
        -100
      ],
      "id": "b6e858ae-a802-4b32-a8e8-3d3329740fb1",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a helpful and intelligent AI assistant that summarizes AI news into a single message sent out to the user 1x a day. This message shuold consist of the input you recieve, but summarized into a reasonably short text that the user can glance over to get up to date on the lates AI news.\n\n\nThe output should conisist of only the summarized text and nothing else, in one string.\n\nToday's date is: {{ $now }}\n\nOutput example:\n**MM-DD-YYYY AI news summary🚀**\n🔍 OpenAI expands Deep Research\nOpenAI's Deep Research, a powerful web-browsing tool for generating in-depth reports, is now available to all paying ChatGPT users (Plus, Team, Enterprise, Edu). Previously, this feature was locked behind a $200/month Pro plan. (10 queries/month limit applies). [Read more here](https://example.com)\n\n🧠 Anthropic's Claude 3.7 Sonnet debuts as the first ‘hybrid reasoning’ AI\nAnthropic has unveiled Claude 3.7 Sonnet, designed for both fast responses and complex reasoning. Available via API, Amazon Bedrock, and Google Cloud's Vertex AI, it combines multiple AI capabilities into a single model. [Learn more here] (https://example.com)\n\n💻 Google launches free AI coding assistant\nGoogle’s Gemini Code Assist now offers individual developers 180,000 free code completions/month, vastly exceeding GitHub Copilot’s free plan. This AI helps with debugging, code generation, and explanations. [More details here] (https://example.com)\n\n🤝 Salesforce & Google expand AI partnership\nSalesforce is integrating Google’s Gemini AI models into Agentforce, improving AI-driven customer service and real-time data analytics on Google Cloud. This marks a major shift in enterprise AI deployment. [Read about it here] (https://example.com)\n",
              "role": "system"
            },
            {
              "content": "=Here's the unformatted summary:\n\n{{ $json.summary }}"
            }
          ]
        },
        "options": {
          "maxTokens": 3000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2280,
        280
      ],
      "id": "e5a8981b-a015-4dcf-b631-eae04f62ed70",
      "name": "Summarize AI News",
      "credentials": {
        "openAiApi": {
          "id": "gcmpfkXrpvUeh9XJ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=# Overview  \nYou are an **AI analyst** specializing in **AI news aggregation**. Your task is to analyze a **news summary** covering the latest developments in AI and compare it against **tweets from influential figures in the AI space** (e.g., Sam Altman, Elon Musk, etc.).  \n\n## Objectives  \n1. **Identify relevant tweets** that add new insights **not already covered** in the news summary.  \n2. **Prioritize the most impactful tweets**—focus on major AI announcements, trends, or noteworthy opinions.  \n3. **Format the output clearly**, listing relevant tweets with a **brief mention** of their content and a **clickable link** to the original tweet.  \n\nOnly output the \n\n## Output Format - Only output the following without additional text:\n**𝕏 Tweets from today to look at**  \n\n- **[Tweet Summary]**  \n[Read the tweet here](https://example.com)  \n\n- **[Tweet Summary]**  \n[Read the tweet here](https://example.com)  \n",
              "role": "system"
            },
            {
              "content": "=Here is the news summary:\n\n{{ $('Summarize AI News').first().json.message.content }}\n\nHere are the tweets:\n\n{{ $('Append Twitter posts to 1 string').first().json.tweets }}"
            }
          ]
        },
        "options": {
          "maxTokens": 3000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3000,
        -60
      ],
      "id": "6d903662-6bc4-4793-8b58-4a4dd964e60f",
      "name": "Review Tweets",
      "credentials": {
        "openAiApi": {
          "id": "gcmpfkXrpvUeh9XJ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/qs0IJxqKoAHZXF8M.xml",
        "options": {
          "ignoreSSL": false
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        820,
        -160
      ],
      "id": "3c251ffd-17ab-4cf4-9a4a-658e63a4a268",
      "name": "RSS: Sam Altman Twitter"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v75wVkfMwMtgWNlA.xml",
        "options": {
          "ignoreSSL": false
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        820,
        0
      ],
      "id": "702206fd-94d5-42c8-8970-aab5c39ec1a8",
      "name": "RSS: Elon Musk Twitter"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/_g4k2gwR2SeTvwOoF.xml",
        "options": {
          "ignoreSSL": false
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        820,
        300
      ],
      "id": "e59d873a-aebf-41bd-baf5-da5d41bf3588",
      "name": "RSS: Daily AI Newsletters"
    },
    {
      "parameters": {
        "content": "## RSS Feeds pulled daily",
        "height": 680,
        "width": 720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        -200
      ],
      "id": "03576068-40fc-4f3b-938f-fb19a2950ad8",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Email Newsletters summarized and expanded on",
        "height": 660,
        "width": 1640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        200
      ],
      "id": "68513d8e-4326-44fd-8a3c-761db6c58b8b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Twitter Posts Combined",
        "height": 400,
        "width": 1640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        -200
      ],
      "id": "7e7d3822-0504-479d-8139-cbcf17d53eb6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Review Twitter Posts",
        "height": 660,
        "width": 680,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2680,
        -200
      ],
      "id": "a1cc5d29-cb1d-46b7-bc6f-9cd8589aac94",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Send Daily Summary",
        "height": 660,
        "width": 540,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3360,
        -200
      ],
      "id": "561bf86a-9bc8-4e4e-a2c4-16037086e209",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "field",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2800,
        -60
      ],
      "id": "15f68c81-fd69-4fe6-8c44-3f3f0f20a0a1",
      "name": "Wait For Both Data",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return [{\n    json: {\n        tweets: items.map(item => \n            `**${item.json.creator}**: ${item.json.contentSnippet}\\n🔗 ${item.json.link}`\n        ).join(\"\\n\\n\")\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        -100
      ],
      "id": "b33daa46-9879-438f-a3e8-58993d839598",
      "name": "Append Twitter posts to 1 string"
    },
    {
      "parameters": {
        "jsCode": "// Function to process the news data and create a summary\nfunction processData(items) {\n  try {\n    // Initialize the summary string\n    let summary = \"# AI NEWS SUMMARY\\n\\n\";\n    let foundItems = false;\n    \n    // Process each item in the input\n    for (const item of items) {\n      // Access the output property directly in the json object\n      if (item.json && item.json.output) {\n        foundItems = true;\n        \n        // If output is a string (not an array), add it directly to the summary\n        if (typeof item.json.output === 'string') {\n          // Add the output content to our summary\n          if (item.json.output === \"NO RELEVANT AI NEWS FOUND\") {\n            // Handle the \"NO RELEVANT AI NEWS FOUND\" case specially\n            summary += \"## No Relevant News\\n\";\n            summary += \"No relevant AI news was found for this query.\\n\\n\";\n          } else {\n            // Add the regular output\n            summary += item.json.output + \"\\n\\n\";\n          }\n        } \n        // Handle the case where output is an array (from your previous structure)\n        else if (Array.isArray(item.json.output)) {\n          // Loop through each news item in the output array\n          for (const newsItem of item.json.output) {\n            if (newsItem.newsSumary) {\n              // Add the news summary to our string\n              summary += `## News Item\\n${newsItem.newsSumary}\\n\\n`;\n              \n              // Check if there are links and add them\n              if (newsItem.links && Array.isArray(newsItem.links)) {\n                summary += \"### Sources:\\n\";\n                for (const link of newsItem.links) {\n                  summary += `- ${link}\\n`;\n                }\n                summary += \"\\n\";\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // If no news items were found, add a note\n    if (!foundItems) {\n      summary += \"No news items found in the provided data.\\n\";\n    }\n    \n    // Return the summary in the correct format for n8n\n    return [{\n      json: {\n        summary: summary\n      }\n    }];\n    \n  } catch (error) {\n    // Handle any errors\n    return [{\n      json: {\n        summary: \"Error processing data: \" + error.message,\n        error: true\n      }\n    }];\n  }\n}\n\n// Call the function with the input data\nreturn processData($input.all());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        280
      ],
      "id": "2e07bd17-b171-4839-87e6-4f088dcb89ce",
      "name": "Append all news to 1 string"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "411f7e17-e54f-4e91-a330-2b9102921a85",
              "name": "message",
              "value": "={{ $('Summarize AI News').first().json.message.content }}\n----------------\n\n{{ $('Review Tweets').first().json.message.content }}\n\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3460,
        -60
      ],
      "id": "3b8f152a-5454-4c53-8252-919891287f43",
      "name": "Set Summary"
    }
  ],
  "pinData": {},
  "connections": {
    "Strip HTML from emails": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Tavily": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        []
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Append all news to 1 string",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Append Twitter posts to 1 string",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize AI News": {
      "main": [
        [
          {
            "node": "Wait For Both Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Review Tweets": {
      "main": [
        [
          {
            "node": "Set Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS: Sam Altman Twitter": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS: Elon Musk Twitter": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "RSS: Daily AI Newsletters": {
      "main": [
        [
          {
            "node": "Strip HTML from emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait For Both Data": {
      "main": [
        [
          {
            "node": "Review Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Twitter posts to 1 string": {
      "main": [
        [
          {
            "node": "Wait For Both Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append all news to 1 string": {
      "main": [
        [
          {
            "node": "Summarize AI News",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Summary": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS: Sam Altman Twitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS: Elon Musk Twitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS: Daily AI Newsletters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8747755d-41cf-45c4-b770-469f043810be",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5c4717101154231e970dc1b7e0435fdea29219fc2663ffcb886eb572a55494a7"
  },
  "id": "Xz6ReUrRNvcCUbB1",
  "tags": []
}